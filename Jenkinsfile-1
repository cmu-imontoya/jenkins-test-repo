pipeline {
    agent any
    environment {
        SONARQUBE_URL = 'http://34.138.255.10:9000'
        GITHUB_REPO = 'https://github.com/cmu-imontoya/jenkins-test-repo'
        GCP_BUCKET = 'dataproc-bucket-11-14-2024'
        HADOOP_CLUSTER_NAME = 'project-option1' 
        REGION = 'us-east1'
    }

    stages {
        stage('Git Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: "${GITHUB_REPO}"]])
                echo 'Git Checkout Completed'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "SonarQube Quality Gate failed, stopping the pipeline!"
                    }
                    echo 'SonarQube Quality Gate Passed'
                }
            }
        }

        stage('Run Hadoop') {
            steps {
                script {
                    sh """
                    gsutil ls ${GCP_BUCKET}/
                    gsutil cp -r ${GCP_BUCKET}/max_temperature/ .
                    cd max_temperature/
                    hadoop fs -put data/ /
                    hadoop jar /usr/lib/hadoop/hadoop-streaming.jar \
                        -file temperature_mapper.py \
                        -mapper 'python temperature_mapper.py' \
                        -file temperature_reducer.py \
                        -reducer 'python temperature_reducer.py' \
                        -input /data/*/ \
                        -output /TempOutFolder
                    hadoop fs -getmerge /TempOutFolder tempResults
                    """
                }
            }
        }

        stage('Upload TempResults bucket') {
            steps {
                script {
                    sh """
                    gsutil cp tempResults ${GCP_BUCKET}/tempResults
                    """
                    echo 'TempResults uploaded to Google Cloud Storage.'
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
